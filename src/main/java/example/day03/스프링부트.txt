스프링부트
    - 스프링과 스프링부트는 구성내용 자체는 다르지 않다
    - 스프링부트는 스프링을 조금 더 쉽게 자동으로 설정을 세팅/관리 해주는 역할
    - java, db, html, css, js, servelt 등 이해도 필요하다
    - 스프링
        1. POJO(Plain Old Java Object) 기반의 경량화된 개발 환경을 제공하는 오픈소스 프레임워크
            - 무거운 객체가 아닌 JAVA로 생성한 순수한 객체 뜻: 오래된 방식의 간단한 자바 객체
            - JAVA 알면 스프링 알기 쉽다 (자바 객체지향 문법의 충실하다)
            - 오픈소스: 누구나 볼 수 있도록 공개한 코드
            - 프레임워크: 틀/뼈대를 제공해서 일정한 규약을 가지고 무언가를 작업하는 일
                vs 라이브러리: 도구 제공(미리 만든 클래스/인터페이스/메소드 제공)
        2. 엔터프라이즈 시스템 개발에 필요한 모든 분야를 지원하는 하나의 플랫폼으로 발전
            - 엔터프라이즈: 복잡하고 정교한 대규모의 모델
        3. 대한민국의 전자 정부 표준 프레임워크로 채택되었다.
            - 공공부문의 정보화 사업의 플랫폼 기준
    - 스프링부트
        * 개발자가 환경설정은 자동화/간소화 하고 비즈니스로직에 집중할수 있게 되었다.
        1. 복잡한 여러개 라이브러리 관리를 하는 xml 방식을 간소화
            - 라이브러리 자동화 도구: 그레이들 또는 메이븐 프로그램
            - 스프링부트는 기본적으로 모든 빈(Bean)/인스턴스 설정을 xml이 아닌 @(어노테이션)으로 처리
        2. 톰캣(Tomcat) 웹 서버를 내장, 복잡한 외적인 환경 설정과 실행을 간소화

        * 인텔리제이에서 실행시 한글 깨지는 경우
            1. 메뉴 -> 설정 -> 검색에 file encoding
            2. 프로젝트 인코딩: utf-8, 프로퍼티 파일 인코딩: utf-8

    - 스프링부트 프로젝트 구조
        * 순수 java 프로젝트와 달리 프로젝트 패키지 구조를 규칙적/규약/약속 대로 지켜야 함
            - 개발자 협업간 미리 정해진 규칙이므로 협업에 용이하다. (자유도가 떨어짐)
        1. src -> main -> java: 개발자가 만들 자바 소스파일을 위치할 패키지
            -> 패키지: 상위 패키지명은 주로 웹사이트의 URL(주소)를 반대로 한다.
                ex) naver.com
                -> com 패키지
                    -> naver 패키지
                        -> AppStart: 해당 스트링부트를 실행하는 클래스
        2. resources    -> static: 정적인 웹 리소스 파일 위치할 캐피지, html, css, js
                        -> application.properties: 프로젝트의 전반적인 설정/속성
                        -> templates: 동적인 웹 리소스 파일 위치할 패키지, JSP, 타임리프, 머스테치 등
        3. build.gradle: 라이브러리들의 의존성 설정 등 프로젝트 전반의 환경을 설정하는 파일
